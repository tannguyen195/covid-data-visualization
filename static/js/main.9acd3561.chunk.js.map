{"version":3,"sources":["store/useStore.js","components/TextGenerate.js","utils/normalize.js","components/Province.js","components/Vietnam.js","components/Scene.js","components/Lights.js","components/CameraControl.js","components/StatisticPanel.js","components/ColorScale.js","assets/images/rings.svg","components/Fallback.js","App.js","reportWebVitals.js","index.js"],"names":["useStore","create","set","get","data","setData","error","setError","loading","setLoading","cameraPosition","THREE","activeMesh","setCameraPosition","payload","isResetCamera","resetCamera","TextGenerate","text","hovered","position","animate","color","name","ref","useRef","state","useFrame","current","y","lerp","Text","depthTest","material-toneMapped","fontSize","font","process","normalizeNumber","number","toLocaleString","Province","geometry","province","useState","useEffect","document","body","style","cursor","onClick","onPointerOver","e","onPointerOut","cases","death","casesToday","castShadow","receiveShadow","material","Vietnam","props","group","scene","useGLTF","Provinces","provinces","traverse","child","isMesh","find","item","normalizedName","getProvinceByName","locations","chroma","scale","colors","id","generateColor","push","dispose","preload","Scene","rotation-x","Math","PI","args","transparent","opacity","Lights","intensity","penumbra","angle","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-visible","shadow-darkness","CameraControl","activeCameraMesh","setActiveCameraMesh","camera","target","getObjectByName","getWorldPosition","x","z","orbitControls","update","clone","sub","length","StatisticPanel","className","cellPadding","cellSpacing","border","map","ColorScale","color_scale","max","middle","background","Fallback","alt","src","loader","App","fetch","then","response","ok","json","index","normalize","replace","normalizeLocation","catch","finally","dpr","shadows","shadowMap","fov","onCreated","gl","setClearColor","Stats","OrbitControls","attach","fallback","Html","fullscreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9acd3561.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nimport create from \"zustand\";\nconst useStore = create((set, get) => ({\n  data: null,\n  setData: (data) => {\n    set(() => ({ data: data }));\n  },\n  error: null,\n  setError: (error) => {\n    set(() => ({ error: error }));\n  },\n  loading: true,\n  setLoading: (loading) => {\n    set(() => ({ loading: loading }));\n  },\n\n  cameraPosition: new THREE.Vector3(\n    1.0959887504577637,\n    0.005898133385926485,\n    0.19488362967967987\n  ),\n  activeMesh: null,\n  setCameraPosition: (payload) => {\n    set(() => ({\n      activeMesh: payload.activeMesh,\n    }));\n  },\n\n  isResetCamera: false,\n  resetCamera: (payload) => {\n    set(() => ({ isResetCamera: payload }));\n  },\n}));\n\nexport default useStore;\n\n//1.0959887504577637,0.005898133385926485,0.19488362967967987\n//-6.2984731793403625, 0.000016055365650645204, 13.720216155052185\n","import { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Text } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport useStore from \"../store/useStore\";\n\nfunction TextGenerate({ text, hovered, position, animate, color, name }) {\n  const ref = useRef();\n\n  const textProps = {\n    fontSize: 0.01,\n    font: process.env.PUBLIC_URL + \"/Roboto-MediumItalic.ttf\",\n  };\n\n  const activeMesh = useStore((state) => state.activeMesh);\n\n  useFrame(() => {\n    if (animate)\n      ref.current.position.y = THREE.MathUtils.lerp(\n        ref.current.position.y,\n        activeMesh === name || hovered ? 0.05 : 0,\n        0.08\n      );\n  });\n  return (\n    <Text\n      ref={ref}\n      position={position}\n      depthTest={false}\n      material-toneMapped={false}\n      color={color}\n      {...textProps}\n    >\n      {!animate ? text : (activeMesh === name || hovered) && text}\n    </Text>\n  );\n}\n\nexport default TextGenerate;\n","import chroma from \"chroma-js\";\n\nexport function normalizeNumber(number) {\n  return number.toLocaleString()\n}\n\nexport function normalText(text) {\n  if (text === \"Bà Rịa – Vũng Tàu\") return \"Vung_Tau\";\n  if (text === \"TP. Hồ Chí Minh\") return \"Ho_Chi_Minh\";\n  return text\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/đ/g, \"d\")\n    .replace(/Đ/g, \"D\")\n    .replace(/ /g, \"_\");\n}\n\nexport function normalizeLocation(locations) {\n  return locations.map((province, index) => {\n    return {\n      ...province,\n      id: index,\n      normalizedName: normalText(province.name),\n    };\n  });\n}\n\nexport function getProvinceByName(name, provinces) {\n  const province = provinces.find((item) => {\n    return item.normalizedName === name;\n  });\n  return province;\n}\n\nexport function generateColor(province) {\n  const color_scale = chroma.scale([\"#f00\", \"#0f0\"]).colors(63);\n  return color_scale[province.id];\n}\n","import TextGenerate from \"./TextGenerate\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport useStore from \"../store/useStore\";\nimport { normalizeNumber } from \"../utils/normalize\";\nfunction Province({ name, geometry, position, color, province }) {\n  const ref = useRef();\n\n  const [hovered, set] = useState(false);\n  const setCameraPosition = useStore((state) => state.setCameraPosition);\n  const activeMesh = useStore((state) => state.activeMesh);\n\n  useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = `pointer`;\n      return () => (document.body.style.cursor = `auto`);\n    }\n  }, [hovered]);\n\n  useFrame(() => {\n    ref.current.position.y = THREE.MathUtils.lerp(\n      ref.current.position.y,\n      hovered || activeMesh === name ? 0.01 : 0,\n      0.05\n    );\n  });\n\n  return (\n    <group\n      name={name}\n      ref={ref}\n      onClick={() => {\n        setCameraPosition({ activeMesh: name });\n      }}\n      onPointerOver={(e) => set(true)}\n      onPointerOut={() => set(false)}\n      position={position}\n    >\n      <TextGenerate\n        name={name}\n        animate={false}\n        position={[0, 0.01, 0.01]}\n        text={province.name}\n        hovered={hovered}\n      />\n      <TextGenerate\n        name={name}\n        color={\"#111\"}\n        animate={true}\n        position={[0, 0.01, -0.05]}\n        text={`Số ca nhiễm: ${normalizeNumber(province.cases)}\n           Tử vong: ${normalizeNumber(province.death)}\n           Hôm nay: +${normalizeNumber(province.casesToday)}`}\n        hovered={hovered}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={geometry}\n        material={\n          new THREE.MeshStandardMaterial({\n            color: color,\n          })\n        }\n      ></mesh>\n    </group>\n  );\n}\n\nexport default Province;\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\nimport Province from \"./Province\";\nimport { getProvinceByName, generateColor } from \"../utils/normalize\";\nimport useStore from \"../store/useStore\";\nexport default function Vietnam(props) {\n  const group = useRef();\n\n  const { scene } = useGLTF(process.env.PUBLIC_URL + \"/map.gltf\");\n  const data = useStore((state) => state.data);\n\n  const Provinces = () => {\n    let provinces = [];\n    scene.traverse((child) => {\n      if (child.isMesh) {\n        const province = getProvinceByName(child.name, data.locations);\n        const color = generateColor(province);\n\n        provinces.push(\n          <Province\n            position={child.position}\n            key={child.name}\n            name={child.name}\n            geometry={child.geometry}\n            color={color}\n            province={province}\n          />\n        );\n      }\n    });\n    return provinces;\n  };\n\n  return (\n    <group ref={group} {...props} dispose={null} position={[-10, 0, 5]}>\n      {data && <Provinces />}\n    </group>\n  );\n}\n\nuseGLTF.preload(process.env.PUBLIC_URL + \"/map.gltf\");\n","\nimport Vietnam from \"./Vietnam\";\nconst Scene = () => {\n\n  return (\n    <>\n     \n      <mesh receiveShadow position={[0, -0.2, 0]} rotation-x={-Math.PI / 2}>\n        <planeBufferGeometry args={[200, 200, ]} />\n        <shadowMaterial transparent opacity={0.5} />\n      </mesh>\n\n      <Vietnam scale={10} />\n    </>\n  );\n};\n\nexport default Scene;\n","\nconst Lights = () => {\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <spotLight\n        penumbra={1}\n        angle={0.35}\n        castShadow\n        position={[40, 200, 0]}\n        intensity={0.5}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-camera-visible={true}\n        shadow-darkness={0.2}\n      />\n    </>\n  );\n};\n\nexport default Lights;\n","import { useFrame } from \"@react-three/fiber\";\nimport { useState } from \"react\";\n\nimport useStore from \"../store/useStore\";\nimport * as THREE from \"three\";\nconst CameraControl = () => {\n  const activeMesh = useStore((state) => state.activeMesh);\n  const isResetCamera = useStore((state) => state.isResetCamera);\n  const resetCamera = useStore((state) => state.resetCamera);\n  const [activeCameraMesh, setActiveCameraMesh] = useState(\"\");\n\n  useFrame(({ camera, scene }) => {\n    let target = new THREE.Vector3();\n    if (activeCameraMesh !== activeMesh && activeMesh) {\n      scene.getObjectByName(activeMesh)?.getWorldPosition(target);\n\n      const cameraPosition = {\n        x: target.x,\n        y: target.y + 3,\n        z: target.z + 7,\n      };\n\n      camera.position.lerp(cameraPosition, 0.05);\n\n      scene.orbitControls?.target.lerp(target, 0.05);\n      scene.orbitControls?.update();\n\n      const diff = camera.position.clone().sub(cameraPosition).length();\n\n      if (diff < 1) setActiveCameraMesh(activeMesh);\n    }\n\n    if (isResetCamera) {\n      const cameraPosition = {\n        x: 0,\n        y: 90,\n        z: 10,\n      };\n\n      camera.position.lerp(cameraPosition, 0.05);\n      scene.orbitControls?.target.lerp({ x: 0, y: 0, z: 0 }, 0.05);\n      scene.orbitControls?.update();\n      const diff = camera.position.clone().sub(cameraPosition).length();\n\n      if (diff < 1) resetCamera(false);\n    }\n  });\n  return null;\n};\n\nexport default CameraControl;\n","import useStore from \"../store/useStore\";\nimport { normalizeNumber } from \"../utils/normalize\";\nfunction StatisticPanel() {\n  const data = useStore((state) => state.data);\n  const setCameraPosition = useStore((state) => state.setCameraPosition);\n  const resetCamera = useStore((state) => state.resetCamera);\n\n  return (\n    <div className=\"statistic-panel\">\n      <div className=\"control\">\n        <button onClick={() => resetCamera(true)}>Reset Camera</button>\n      </div>\n      {data && (\n        <div>\n          <div className=\"tbl-header\">\n            <table cellPadding=\"0\" cellSpacing=\"0\" border=\"0\">\n              <thead>\n                <tr className=\"tr-header\">\n                  <th>Tỉnh</th>\n                  <th>Số ca nhiễm</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n\n          <div className=\"tbl-content\">\n            <table cellPadding=\"0\" cellSpacing=\"0\" border=\"0\">\n              <tbody>\n                <tr>\n                  {data.locations.map((province) => {\n                    return (\n                      <td\n                        onClick={() =>\n                          setCameraPosition({\n                            activeMesh: province.normalizedName,\n                          })\n                        }\n                        key={province.id}\n                      >\n                        {province.name}\n                      </td>\n                    );\n                  })}\n                </tr>\n                <tr>\n                  {data.locations.map((province) => {\n                    return (\n                      <td key={province.id}>\n                        {normalizeNumber(province.cases)}\n                      </td>\n                    );\n                  })}\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default StatisticPanel;\n","import chroma from \"chroma-js\";\nimport useStore from \"../store/useStore\";\nimport { normalizeNumber } from \"../utils/normalize\";\nfunction ColorScale() {\n  const color_scale = chroma.scale([\"#f00\", \"#0f0\"]).colors(63);\n  const data = useStore((state) => state.data);\n\n  const max = data?.locations[0].cases;\n  const min = 0;\n  const middle = data?.locations[31].cases;\n\n  return (\n    <>\n      {data && (\n        <div className=\"color-scale\">\n          <div className=\"scale-bar\">\n            <h4>{normalizeNumber(max)} ca</h4>\n            <h4>{normalizeNumber(middle)} ca</h4>\n            <h4>{min} ca</h4>\n          </div>\n          <div className=\"color-bar\">\n            {color_scale.map((color) => {\n              return (\n                <span\n                  className=\"color\"\n                  key={color}\n                  style={{ background: color }}\n                ></span>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default ColorScale;\n","export default __webpack_public_path__ + \"static/media/rings.f85f7656.svg\";","import loader from \"../assets/images/rings.svg\";\n\nfunction Fallback() {\n  return (\n    <div className={\"fallback\"}>\n      <img className={\"loader\"} alt=\"loader\" src={loader} />\n      <h1>GETTING COVID DATA </h1>\n    </div>\n  );\n}\n\nexport default Fallback;\n","import \"./App.css\";\n\nimport { Suspense, useEffect } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Stats, OrbitControls, Html } from \"@react-three/drei\";\n\nimport Scene from \"./components/Scene.js\";\nimport Lights from \"./components/Lights\";\nimport CameraControl from \"./components/CameraControl.js\";\nimport StatisticPanel from \"./components/StatisticPanel.js\";\nimport ColorScale from \"./components/ColorScale.js\";\nimport Fallback from \"./components/Fallback\";\n\nimport useStore from \"./store/useStore.js\";\nimport { normalizeLocation } from \"./utils/normalize.js\";\nimport * as THREE from \"three\";\n\nconst App = () => {\n  const setData = useStore((state) => state.setData);\n  const setError = useStore((state) => state.setError);\n  const setLoading = useStore((state) => state.setLoading);\n\n  useEffect(() => {\n    //fetch data\n    fetch(\"https://static.pipezero.com/covid/data.json\")\n      .then((response) => {\n        if (response.ok) return response.json();\n      })\n      .then((data) => {\n        const locations = normalizeLocation(data.locations);\n        setData({ ...data, locations });\n      })\n      .catch((error) => setError(error))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <StatisticPanel />\n      <ColorScale />\n      <Canvas\n        dpr={[1, 1.5]}\n        shadows\n        shadowMap={THREE.PCFSoftShadowMap}\n        camera={{\n          position: [18, 19, 36],\n          fov: 30,\n        }}\n        onCreated={({ gl }) => {\n          gl.setClearColor(\"#659dbd\");\n        }}\n      >\n        <axesHelper />\n        <Stats />\n        <OrbitControls attach=\"orbitControls\" />\n        <Lights />\n        <CameraControl />\n        <Suspense\n          fallback={\n            <Html fullscreen>\n              <Fallback />\n            </Html>\n          }\n        >\n          <Scene />\n        </Suspense>\n      </Canvas>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}